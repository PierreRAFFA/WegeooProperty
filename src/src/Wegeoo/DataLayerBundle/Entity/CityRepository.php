<?php

namespace Wegeoo\DataLayerBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CityRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CityRepository extends EntityRepository
{
	public function getCitiesFromPopulation($pLimit)
	{
		//Protection to prevent all cities export (too heavy)
		if ($pLimit == "" || $pLimit > 100)
			$pLimit = 100;
		
		$lQueryBuilder = $this->_em->createQueryBuilder('c');
		
		$lQueryBuilder->select('c')
				      ->from($this->_entityName , 'c')
					  ->where("c.parentCode IS NULL")
					  ->orderBy('c.pop', 'DESC')
					  ->setMaxResults($pLimit);
					  
		$lResults = $lQueryBuilder->getQuery()->getResult();
		return $lResults;
	}
	
	public function getCitiesFromNameStartWith($pString)
	{
		$lQueryBuilder = $this->_em->createQueryBuilder('c'); 
		
		$lQueryBuilder->select('c.name,c.uppercaseName,c.slugName,c.code,c.postCode,c.latitude,c.longitude,c.slugName')
				      ->from($this->_entityName , 'c')
					  ->where("c.uppercaseName LIKE :uppercaseName")
                      ->setParameter("uppercaseName" , "$pString%")
					  ->orderBy('c.pop', 'DESC')
					  ->setMaxResults(50);
		
		//$lQuery = $lQueryBuilder->getQuery()->getSQL();
		$lResults = $lQueryBuilder->getQuery()->getResult();
		return $lResults;
	}

    public function getCityFromDivision($division)
    {
        $lQueryBuilder = $this->_em->createQueryBuilder('c');

        $lQueryBuilder->select('c')
            ->from($this->_entityName , 'c')
            ->where("c.division LIKE '%$division%'");
        $lResults = $lQueryBuilder->getQuery()->getResult();
        return $lResults;
    }

    public function getCitiesFromCodeAndName($code,$uppercaseName)
    {
        $lQueryBuilder = $this->_em->createQueryBuilder('c');
        $lQueryBuilder->select('c')
            ->from($this->_entityName , 'c')
            ->where("c.code = :code")
            ->setParameter( "code" , "$code")
            ->andWhere("c.uppercaseName = :name")
            ->setParameter( "name" , "$uppercaseName");
        $lResults = $lQueryBuilder->getQuery()->getResult();

        if ( count($lResults) == 0)
        {
            $lQueryBuilder = $this->_em->createQueryBuilder('c');
            $lQueryBuilder->select('c')
                ->from($this->_entityName , 'c')
                ->where("c.code = :code")
                ->setParameter( "code" , "$code")
                ->andWhere("c.uppercaseName LIKE :name")
                ->setParameter( "name" , "%$uppercaseName%");
            $lResults = $lQueryBuilder->getQuery()->getResult();
        }

        return $lResults;
    }
    public function getCitiesFromCodeAndDivision($code,$division)
    {
        $lQueryBuilder = $this->_em->createQueryBuilder('c');

        $lQueryBuilder->select('c')
            ->from($this->_entityName , 'c')
            ->where("c.code = :code")
            ->setParameter( "code" , "$code")
            ->andWhere("c.division LIKE :division")
            ->setParameter( "division" , "%$division%");
        $lResults = $lQueryBuilder->getQuery()->getResult();
        return $lResults;
    }
}
